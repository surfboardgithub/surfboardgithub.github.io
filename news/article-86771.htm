<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://surfboardgithub.github.io/news/article-86771.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>Java-NIO之Channel（通道）</title>
        <meta name="description" content="通道表示与实体的开放连接，例如硬件设备、文件、网络套接字或能够执行一个或多个不同 I/O 操作（例如读取或写入）的程序组件。 1.1：Channel与Stream的对比     Stream Chan" />
        <link rel="icon" href="/assets/website/img/surfboardgithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="SurfboardGithub免费节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://surfboardgithub.github.io/news/article-86771.htm" />
    <meta property="og:site_name" content="SurfboardGithub免费节点官网" />
    <meta property="og:title" content="Java-NIO之Channel（通道）" />
    <meta property="og:image" content="https://surfboardgithub.github.io/uploads/20240806-1/5f7cf95b3f317c66596c34e5f4b4f574.webp" />
        <meta property="og:release_date" content="2025-04-02T07:44:27" />
    <meta property="og:updated_time" content="2025-04-02T07:44:27" />
        <meta property="og:description" content="通道表示与实体的开放连接，例如硬件设备、文件、网络套接字或能够执行一个或多个不同 I/O 操作（例如读取或写入）的程序组件。 1.1：Channel与Stream的对比     Stream Chan" />
    
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java-NIO之Channel（通道）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
        
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="/assets/website/js/frontend/surfboardgithub/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/surfboardgithub/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/surfboardgithub/aos/aos.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/surfboardgithub/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/surfboardgithub/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Main CSS File -->
    <link href="/assets/website/css/surfboardgithub/main.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-B6X3DBFZRC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-B6X3DBFZRC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="starter-page-page" data-page="detail">
        <header id="header" class="header d-flex align-items-center fixed-top">
        <div class="container-fluid container-xl position-relative d-flex align-items-center">
            <a href="/" class="logo d-flex align-items-center me-auto">
                        <span class="sitename">Surfboard Github</span>
                        </a>
            <nav id="navmenu" class="navmenu">
                <ul>
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
                <i class="mobile-nav-toggle d-xl-none bi bi-list"></i>
            </nav>
        </div>
    </header>
    <main class="main" style="margin-top: 6rem;">
        <!-- Page Title -->
        <div class="page-title" data-aos="fade">
            <div class="container d-lg-flex justify-content-between align-items-center">
                <h1 class="mb-2 mb-lg-0">Java-NIO之Channel（通道）</h1>
                <nav class="breadcrumbs">
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li class="current">正文</li>
                    </ol>
                </nav>
            </div>
        </div><!-- End Page Title -->

        <section id="features" class="features section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p><u>通道表示与实体的开放连接，例如硬件设备、文件、网络套接字或能够执行一个或多个不同 I/O 操作（例如读取或写入）的程序组件。</u></p> <h2 id="11channel与stream的对比">1.1：Channel与Stream的对比</h2> <table> <thead> <tr> <th></th> <th>Stream</th> <th>Channel</th> <th>为什么</th> </tr> </thead> <tbody> <tr> <td>是否支持异步</td> <td>否</td> <td>是</td> <td></td> </tr> <tr> <td>是否同时支持输入和输出</td> <td>否</td> <td>是</td> <td>Stream的输入、输出分别需要InputStream、OutputStream</td> </tr> <tr> <td>是否必须结合Buffer使用</td> <td>否</td> <td>是</td> <td>缓冲区是通道内部发送数据和接收数据的端点</td> </tr> <tr> <td>性能</td> <td>低</td> <td>高</td> <td>通道是访问IO服务的导管，通过通道，我们可以以最小的开销来访问操作系统的I/O服务</td> </tr> </tbody> </table> <h2 id="12channel的类型">1.2：Channel的类型</h2> <p><strong><font color="red" size="4">文件类：</font></strong></p> <ul> <li>FileChannel</li> </ul> <p>可通过 FileInputStream/FileOutputStream 的getChannel方法获取通道。</p> <hr/> <p><strong><font color="red" size="4">网络类：</font></strong></p> <p><strong>面向流模式的socket协议：</strong></p> <ul> <li>SocketChannel</li> <li>ServerSocketChannel</li> </ul> <p>可通过 Socket/SocketServer 的getChannel方法获取通道。</p> <p><strong>面向数据报模式的UDP协议：</strong></p> <ul> <li>DatagramChannel</li> </ul> <p>可通过 DatagramSocket 的getChannel方法获取通道。</p> <h2 id="13操作系统io演变史">1.3：操作系统IO演变史</h2> <p>早一代IO操作是由CPU负责IO接口：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/709216e05416ab5d8f7757f64703682f.jpg" alt="Java-NIO之Channel（通道）"></p> <p>新一代DMA授权处理IO接口：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/cdc6a964fb58ed59fe4d64a2253e6f28.jpg" alt="Java-NIO之Channel（通道）"></p> <p>通道（Channel）模式：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1d882d127cb1a6e6278aa8503d5419c0.jpg" alt="Java-NIO之Channel（通道）"></p> <p>通道的产生是由于操作系统的升级而支持的。</p> </h1> <p><u>在操作系统中对IO设备的控制方式一共有四种，按时间线依次是<strong><font color="red">轮询、中断、DMA、和通道</font></strong> 方式。</u></p> <ul> <li>轮旋</li> </ul> <p>轮询就是进行IO时操作系统一直问控制器数据准备好了没有。</p> <ul> <li>中断</li> </ul> <p>中断就是异步的方式进行了，CPU向设备控制器发送一条IO指令后接着返回继续做原来的工作，而当设备控制器从设备中取出数据放到控制器的寄存器中后便向CPU发送中断信号，CPU在检查完数据后便向控制器发送取走数据的信号，将数据写入内存，但仍是以字节为单位的。</p> <ul> <li>DMA</li> </ul> <p>DMA则是CPU和设备控制器之间的引入的一层加快速度的手段，由DMA代替CPU进行数据传送，CPU将指令发送给DMA，DMA向控制器发送请求，设备控制器将数据从缓冲区将数据直接写入内存。完成后设备控制器发送一个信号给DMA，DMA重复检查数据是否传送完成，确认完成后中断让CPU知道。</p> <p>DMA比起中断方式已经显著减少了CPU的干预，但是CPU每发出一条IO指令，只能去读写一个连续的数据块，当要读多个数据块并存放到不同的内存区域中去，CPU需要发送多条IO指令及进行多次中断。</p> <ul> <li>通道</li> </ul> <p>IO通道方式是DMA方式的发展，把对一个数据块的干预减少为对一组数据块的干预。</p> <hr/> <p><font color="red" size="5">IO通道有三种：</font></p> <ul> <li>字节多路通道(Byte Multiplexor Channel)</li> <li>选择通道(Block Selector Channel)</li> <li>数组多路通道(Block Multiplexor Channel)</li> </ul> <blockquote> <blockquote> <p>根据通道的工作方式分类，通道可以分为<u><font color="red" size="4">字节多路通道、选择通道、数组多路通道</font></u>。<br /><u><font color="red" size="4">字节多路通道</font>是一种简单的共享通道，主要用于连接大量的低速设备。</u><br /> 由于外围设备的工作速度较慢，通道在传送两个字节之间有很多空闲的时间，利用这段空闲时间字节多路通道可以为其他外围设备服务。因此字节多路通道采用分时工作方式，依赖它与CPU之间的高速总线分时为多台外围设备服务。<br /><u><font color="red" size="4">数据选择通道</font>用于连接高速的外围设备。</u><br /> 高速外围设备需要很高的数据传输率，因此不能采用字节多路通道那样的控制方式。选择通道在物理上可以连接多台外围设备，但多台设备不能同事工作。也就是在同一段时间内，选择通道只能为一台外围设备服务，在不同的时间内可以选择不同的外围设备。一旦选中某一设备，通道就进入<font color="red">忙</font>状态，知道该设备数据传输工作结束，才能为其他设备服务。<br /><u><font color="red" size="4">数组多路通道</font>是字节多路通道和选择通道的结合。</u><br /> 其基本思想是：当某设备进行数据传输时，通道只为该设备服务；当设备在进行寻址等控制性操作时，通道暂时断开与设备的连接，挂起该设备的通道程序，去为其他设备服务，即执行其他设备的通道程序。有数数组多路通道既保持了选择通道的告诉传输数据的有点，又充分利用了控制性操作偶读时间间隔为其他设备服务，使得通道效率充分得到发挥，因此数据多路通道在实际计算机系统中应用最多，适合于高速设备的数据传输。</p> <p>（以上引用内容来源于<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://easylearn.baidu.com/edu-page/tiangong/questiondetail?id=1722687790698845246&amp;source=tikushiti&amp;source_id=856013ef7d1cfad6195f312b3169a4517723e5f3"  title="百度教育" target="_blank" rel="nofollow">百度教育</a>）</p> </blockquote> </blockquote> <p>至于JAVA的Channel和操作系统的的通道是如何选择通道类型、如何交互的就没法深入了，暂且理解JAVA的Channel是对操作系统的通道的一种抽象实现吧。</p> </h1> <p>上一篇已经介绍过Channel的文件内存映射（map）,就不做介绍了。</p> <p><u>所谓的分散读取、聚集写入就是用多个buffer来接收数据、传输数据。</u><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/09b93d7d0088949ea4094fb6c1b2549e.jpg" alt="Java-NIO之Channel（通道）"></p> <p><font color="red" size="4">分散读取、聚集写入</font>代码示例：</p> <pre><code class="language-java">    @Test     public void gatherWrite() {         FileInputStream inputStream = null;         FileOutputStream outputStream = null;         FileChannel inChannel = null;         FileChannel outChannel = null;         try {             File file = new File("src/test/java/com/loper/mine/SQLParserTest.java");             inputStream = new FileInputStream(file);             inChannel = inputStream.getChannel();              ByteBuffer buffer1 = ByteBuffer.allocate(8);             ByteBuffer buffer2 = ByteBuffer.allocate(15);             ByteBuffer[] buffers = new ByteBuffer[]{buffer1, buffer2};              // 分散读取             inChannel.read(buffers);             for (ByteBuffer buffer : buffers) {                 buffer.flip();                 System.out.println(buffer.mark());             }              File outFile = new File("src/test/java/com/loper/mine/1.txt");             outputStream = new FileOutputStream(outFile);             outChannel = outputStream.getChannel();             // 聚集写入             outChannel.write(buffers);          } catch (Exception e) {             e.printStackTrace();         } finally {             try {                 if (inputStream != null)                     inputStream.close();                 if (outputStream != null)                     outputStream.close();                 if (inChannel != null)                     inChannel.close();                 if (outChannel != null)                     outChannel.close();             } catch (IOException e) {                 e.printStackTrace();             }         }     }</code></pre> </h1> <h2 id="41socket协议">4.1：socket协议</h2> <p>这部分代码比较复杂，可以翻看我的github代码，这里就不坐介绍了。<br /> 地址：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/zgq7/devloper-mine/tree/master/src/main/java/com/loper/mine/core/socket/nio"  target="_blank" rel="nofollow">https://github.com/zgq7/devloper-mine/tree/master/src/main/java/com/loper/mine/core/socket/nio</a></p> <h2 id="42udp协议">4.2：UDP协议</h2> <p>UDP发送数据：</p> <pre><code class="language-java">    @Test     public void send() {         DatagramChannel channel = null;         try {             channel = DatagramChannel.open();             // 设置为非阻塞             channel.configureBlocking(false);              ByteBuffer buffer = ByteBuffer.allocate(1024);             Scanner scanner = new Scanner(System.in);             while (true) {                 String nextLine = scanner.nextLine();                 buffer.put(nextLine.getBytes());                 buffer.flip();                 channel.send(buffer, new InetSocketAddress("127.0.0.1", 8056));                 buffer.clear();                 if ("over".equals(nextLine))                     break;             }         } catch (IOException e) {             e.printStackTrace();         } finally {             if (channel != null) {                 try {                     channel.close();                 } catch (IOException e) {                     e.printStackTrace();                 }             }         }     }</code></pre> <p>UDP接收数据：</p> <pre><code class="language-java">    @Test     public void receive() {         DatagramChannel channel = null;         try {             channel = DatagramChannel.open();             // 设置为非阻塞             channel.configureBlocking(false);             channel.bind(new InetSocketAddress(8056));              Selector selector = Selector.open();             channel.register(selector, SelectionKey.OP_READ);              while (true) {                 int select = selector.select();                 boolean exit = false;                  Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();                 while (iterator.hasNext()) {                     SelectionKey selectionKey = iterator.next();                      if (selectionKey.isReadable()) {                         ByteBuffer buffer = ByteBuffer.allocate(1024);                         channel.receive(buffer);                         buffer.flip();                         byte[] data = new byte[buffer.limit()];                         buffer.get(data);                         String str = new String(data);                         System.out.println("收到：" + str);                         if ("over".equals(str))                             exit = true;                     }                     iterator.remove();                 }                 if (exit)                     break;             }          } catch (IOException e) {             e.printStackTrace();         } finally {             if (channel != null) {                 try {                     channel.close();                 } catch (IOException e) {                     e.printStackTrace();                 }             }         }     }</code></pre> <p>接收端接收数据并退出：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7e3e359cb07833f1dfa865145330b3b8.jpg" alt="Java-NIO之Channel（通道）"></p> <hr/> <p><u><font color="red">以上即为本文理论知识+代码实战全部内容。如有错误欢迎指正。</font></u></p> <p>本文参考文章：</p> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/yy3b2007com/p/7263033.html"  title="通道(Channel)的原理与获取" target="_blank" rel="nofollow">通道(Channel)的原理与获取</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://cloud.tencent.com/developer/article/1739347"  title="10分钟看懂 Java NIO 底层原理" target="_blank" rel="nofollow">10分钟看懂 Java NIO 底层原理</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/cool_flag/article/details/99618101"  title="java nio中channel和操作系统的关系" target="_blank" rel="nofollow">java nio中channel和操作系统的关系</a></li> </ul> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-86070.htm">小型狗粮加工设备视频讲解教程（小型狗粮加工设备视频讲解教程全集）</a></p>
                                        <p>下一个：<a href="/news/article-86772.htm">济南免费领养宠物的网站（济南免费领养猫）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-87485.htm" title="VUE元素的隐藏和显示（v-show指令)">VUE元素的隐藏和显示（v-show指令)</a></li>
                        <li class="py-2"><a href="/news/article-88225.htm" title="动物医院英语翻译怎么写的（动物医院 翻译）">动物医院英语翻译怎么写的（动物医院 翻译）</a></li>
                        <li class="py-2"><a href="/news/article-67064.htm" title="分布式事务提交协议2PC/3PC详解">分布式事务提交协议2PC/3PC详解</a></li>
                        <li class="py-2"><a href="/news/article-77657.htm" title="上海宠物医院收费价目表查询官网（上海宠物医院收费价目表查询官网电话）">上海宠物医院收费价目表查询官网（上海宠物医院收费价目表查询官网电话）</a></li>
                        <li class="py-2"><a href="/news/article-67065.htm" title="手撕spring核心源码，彻底搞懂spring流程">手撕spring核心源码，彻底搞懂spring流程</a></li>
                        <li class="py-2"><a href="/news/article-70283.htm" title="申请动物诊疗机构的条件有哪些（申请动物诊疗机构的条件有哪些呢）">申请动物诊疗机构的条件有哪些（申请动物诊疗机构的条件有哪些呢）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-25-free-node-subscribe.htm" title="3月25日 | Surfboard节点订阅每天更新21.1M/S免费节点订阅链接，Surfboard免费机场">3月25日 | Surfboard节点订阅每天更新21.1M/S免费节点订阅链接，Surfboard免费机场</a></li>
                        <li class="py-2"><a href="/news/article-67708.htm" title="让野猫抓出血了怎么办（被野猫抓伤出血了怎么办）">让野猫抓出血了怎么办（被野猫抓伤出血了怎么办）</a></li>
                        <li class="py-2"><a href="/news/article-81120.htm" title="Netty之非阻塞处理">Netty之非阻塞处理</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-20-free-node-subscribe-links.htm" title="3月20日 | Surfboard节点订阅每天更新21.8M/S免费节点订阅链接，Surfboard免费机场">3月20日 | Surfboard节点订阅每天更新21.8M/S免费节点订阅链接，Surfboard免费机场</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">88</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- /Features Section -->
    </main>
        <footer id="footer" class="footer position-relative">
        <div class="container copyright text-center mt-4">
                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
            <p>SurfboardGithub免费节点官网 版权所有 Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- Scroll Top -->
    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Preloader -->
    <div id="preloader"></div>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/surfboardgithub/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/swiper/swiper-bundle.min.js"></script>
    <!-- Main JS File -->
    <script src="/assets/website/js/frontend/surfboardgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>