<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://surfboardgithub.github.io/news/article-25231.htm" />
    <meta charset="utf-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title>设计模式-六大原则之单一职责</title>
        <meta name="description" content="在校学生，闲来无事复习设计模式，写此以记录。   定义 对于单一职责的原定义是：There should never be more than one reason for a class to ch" />
        <link rel="icon" href="/assets/website/img/surfboardgithub/favicon.ico" type="image/x-icon"/>
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com" rel="preconnect">
    <link href="https://fonts.gstatic.com" rel="preconnect" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Inter:wght@100;200;300;400;500;600;700;800;900&family=Nunito:ital,wght@0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <!-- Vendor CSS Files -->
    <link href="__ADDON__/js/frontend/surfboardgithub/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/surfboardgithub/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/surfboardgithub/aos/aos.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/surfboardgithub/glightbox/css/glightbox.min.css" rel="stylesheet">
    <link href="__ADDON__/js/frontend/surfboardgithub/swiper/swiper-bundle.min.css" rel="stylesheet">
    <!-- Main CSS File -->
    <link href="/assets/website/css/surfboardgithub/main.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-B6X3DBFZRC"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-B6X3DBFZRC');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body class="starter-page-page" data-page="detail">
        <header id="header" class="header d-flex align-items-center fixed-top">
        <div class="container-fluid container-xl position-relative d-flex align-items-center">
                        <a href="/" class="logo d-flex align-items-center me-auto">
                <span class="sitename">Surfboard Github</span>
            </a>
                        <nav id="navmenu" class="navmenu">
                <ul>
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <i class="mobile-nav-toggle d-xl-none bi bi-list"></i>
            </nav>
        </div>
    </header>
    <main class="main" style="margin-top: 6rem;">
        <!-- Page Title -->
        <div class="page-title" data-aos="fade">
            <div class="container d-lg-flex justify-content-between align-items-center">
                <h1 class="mb-2 mb-lg-0">设计模式-六大原则之单一职责</h1>
                <nav class="breadcrumbs">
                    <ol>
                        <li><a href="/">首页</a></li>
                        <li><a href="/news/">新闻资讯</a></li>
                        <li class="current">正文</li>
                    </ol>
                </nav>
            </div>
        </div><!-- End Page Title -->

        <section id="features" class="features section">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <blockquote> <p>在校学生，闲来无事复习设计模式，写此以记录。</p> </blockquote> <h2> <a id="_3" rel="nofollow"></a>定义</h2> <p>对于单一职责的原定义是：There should never be more than one reason for a class to change.很简单的一句英文，有且只有一个原因能引起类的改变。即使对于英语很渣的我来说也能看懂，但要想理解却也是不容易。<br /> 单一职责主要应用于三个方面，接口、类和方法。我下面给出一些示例来详细阐述我的看法。</p> <h3> <a id="_7" rel="nofollow"></a>对于接口</h3> <p>Java本就是面向接口编程，接口的定义基本定下了后面实现类的走向。记得刚接触Java没多久的时候，根本无法体会到接口存在的意义，很多时候都不去写接口，即时写也都是随便糊弄那种。为此写过下面这段很蠢的代码</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 接口方法  * @Date 2019/10/22-17:08  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//注册信息验证</span>     <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>在实现类中</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 实现类  * @Date 2019/10/22-17:11  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogin</span> <span class="token keyword">implements</span> <span class="token class-name">UserInfo</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证方法          */</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token comment">//注册信息验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>各位应该都能看出这段代码写的是有多差劲，我在一个接口中同时将登录和注册都写了进去，而在写登录和注册的实体类的时候又分开写，两个实体类都需要继承UserInfo接口，但这就造成登录实体类根本不需要注册这部分方法但我不得不去实现它。虽然这里也可以将登录和注册的实体类写在一起，这样就可以避免这种情况，但这样就造成了这个类的复杂程度进一步提高，如果项目越做越大，后面的维护就变得相当困难。<br /> 为此不如看看下面的这种写法</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 登录接口  * @Date 2019/10/22-17:31  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoginVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 注册接口  * @Date 2019/10/22-17:32  */</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RegisterVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册信息验证</span>     <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description: 实现类  * @Date 2019/10/22-17:11  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserLogin</span> <span class="token keyword">implements</span> <span class="token class-name">LoginVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">loginVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-17:38  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegister</span> <span class="token keyword">implements</span> <span class="token class-name">RegisterVerifyInter</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册信息验证</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">registerVerify</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>这种方式就是简单的实现了接口的单一职责。我的理解，接口的单一职责就是将一种功能或者某一类基本相似的功能放到一起。</p> <h3> <a id="_123" rel="nofollow"></a>类的单一职责</h3> <p>对于类的单一职责，我感觉没有很严格的规范，需求不同，实现的方式也不同，下面依旧按照登录和注册的例子列举两种不同的写法。<br /> 对于一个用户来说，一个用户就是一个实体，一个实体就应该包括相应的操作。</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-17:56  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{<!-- --></span>          <span class="token comment">//登录操作</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//注册验证</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 注册验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新信息</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          *更新信息          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>但如果用户中每一步操作的话又可以将每步操作分开写</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">class</span> <span class="token class-name">Login</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//登录操作</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 登录验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Register</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//注册验证</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          * 注册验证          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Update</span><span class="token punctuation">{<!-- --></span>      <span class="token comment">//更新信息</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">/**          *更新信息          */</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>虽然在这里第二种写法显得有些累赘，但确实严格按照单一职责的原则。没有孰优孰劣，只有适不适合，如果一个大型项目中一个用户的操作有相当大量的代码要进行实现的时候采用第二种方法分开写也没有任何错误。</p> <h2> <a id="_204" rel="nofollow"></a>方法的单一职责</h2> <p>个人感觉，方法的单一职责可以参考接口，尽量避免一个方法中进行多种类型的操作，参考《设计模式之禅》写出下面的示例</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMessage</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeInfo</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>String password<span class="token punctuation">,</span>String sex<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>          <span class="token comment">//更新用户名</span>          <span class="token comment">//更新密码</span>          <span class="token comment">//更新性别</span>                  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>在这个示例中，当用户提交修改账户信息的指令后service层调用changeInfo方法，直接对所有需要修改的账户信息进行修改，但这造成一个问题，changeInfo这个方法的职责太过笼统，如果后期需要添加或者修改这部分的代码，可能会造成较大的麻烦。<br /> 下面对代码进行优化</p> <pre><code class="prism language-java"><span class="token comment">/**  * @Author: Lemon  * @Program: Single Responsibility Principle  * @Description:  * @Date 2019/10/22-18:03  */</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeMessage</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">//更新用户名</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新用户名操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新密码</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changePassword</span><span class="token punctuation">(</span>String password<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新密码操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token comment">//更新性别</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">changeSex</span><span class="token punctuation">(</span>String sex<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token comment">//更新性别操作</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>改进后每个修改部分都有对应的方法，后期如果需要进行大量的修改会更加清晰，维护也更加方便。</p> <p>单一职责最重要的特点就是提高代码的可维护性，可读性和扩展性。但其中很多部分还要结合实际需求去考虑，采用最合适的方式。</p> <p>参考资料：《设计模式之禅》《一故事一设计模式》</p> <p><strong>如哪里写的有不对的地方，欢迎大家指正。</strong></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-24767.htm">宠物医院猫咪打疫苗要多少钱一次（宠物医院猫咪打疫苗要多少钱一次呀）</a></p>
                                        <p>下一个：<a href="/news/article-25232.htm">C3P0反序列化链学习</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-9-5-node-share-links.htm" title="9月5日 | Surfboard节点订阅每天更新18.5M/S免费节点订阅链接">9月5日 | Surfboard节点订阅每天更新18.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-25231.htm" title="设计模式-六大原则之单一职责">设计模式-六大原则之单一职责</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-28-node-share.htm" title="10月28日 | Surfboard节点订阅每天更新19.5M/S免费节点订阅链接，Surfboard免费机场">10月28日 | Surfboard节点订阅每天更新19.5M/S免费节点订阅链接，Surfboard免费机场</a></li>
                        <li class="py-2"><a href="/news/article-21534.htm" title="1970年农历4月27日出生的人命好吗（1970年阴历4月17日是什么命）">1970年农历4月27日出生的人命好吗（1970年阴历4月17日是什么命）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-17-free-subscribe-node.htm" title="10月17日 | Surfboard节点订阅每天更新20.8M/S免费节点订阅链接，Surfboard免费机场">10月17日 | Surfboard节点订阅每天更新20.8M/S免费节点订阅链接，Surfboard免费机场</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-4-share-surfboard-node.htm" title="12月4日 | Surfboard节点订阅每天更新19.5M/S免费节点订阅链接，Surfboard免费机场">12月4日 | Surfboard节点订阅每天更新19.5M/S免费节点订阅链接，Surfboard免费机场</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-1-surfboard-node.htm" title="12月1日 | Surfboard节点订阅每天更新19.5M/S免费节点订阅链接，Surfboard免费机场">12月1日 | Surfboard节点订阅每天更新19.5M/S免费节点订阅链接，Surfboard免费机场</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-14-free-node-subscribe-links.htm" title="8月14日 | Surfboard节点订阅每天更新21.1M/S免费节点订阅链接">8月14日 | Surfboard节点订阅每天更新21.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-23840.htm" title="狗狗体外驱虫后虫子去哪了（狗体外驱虫后虫到哪了）">狗狗体外驱虫后虫子去哪了（狗体外驱虫后虫到哪了）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-17-free-subscribe-node.htm" title="11月17日 | Surfboard节点订阅每天更新18.5M/S免费节点订阅链接，Surfboard免费机场">11月17日 | Surfboard节点订阅每天更新18.5M/S免费节点订阅链接，Surfboard免费机场</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- /Features Section -->
    </main>
        <footer id="footer" class="footer position-relative">
        <div class="container copyright text-center mt-4">
            <p>SurfboardGithub免费节点官网 版权所有 Powered by WordPress</p>
            </div>
        </div>
    </footer>
    <!-- Scroll Top -->
    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>
    <!-- Preloader -->
    <div id="preloader"></div>
    <!-- Vendor JS Files -->
    <script src="/assets/website/js/frontend/surfboardgithub/jquery-1.9.1.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/php-email-form/validate.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/aos/aos.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/glightbox/js/glightbox.min.js"></script>
    <script src="/assets/website/js/frontend/surfboardgithub/swiper/swiper-bundle.min.js"></script>
    <!-- Main JS File -->
    <script src="/assets/website/js/frontend/surfboardgithub/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>